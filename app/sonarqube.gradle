// recommend to specify the flavor once and dynamically adapt paths to it
def flavor = "develop" // flavor we want to have tested. Should be static
def Flavor = "Develop" // flavor again, but starting with upper case

// noinspection is used to remove some "warnings" from Android Studio
sonarqube {
    //noinspection GroovyAssignabilityCheck
    properties {
        /* Sonar needs to be informed about your libraries and the android.jar to understand that methods like
         * onResume() is called by the Android framework. Without that information Sonar will very likely create warnings
         * that those methods are never used and they should be removed. Same applies for libraries where parent classes
         * are required to understand how a class works and is used. */
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-23/android.jar,"
        "build/intermediates/exploded-aar/**/classes.jar"

        property "sonar.host.url", "http://localhost:9000"
        property "sonar.projectKey", "myApp" // some shortcut name
        property "sonar.projectName", "my Android App"
        property "sonar.projectVersion", version

        // Database
        // Database
        property "sonar.jdbc.url", "jdbc:mysql://localhost:9000/sonar?autoReconnect=true&useUnicode=true&characterEncoding=utf8"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "admin"
        property "sonar.jdbc.password", "admin"

        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java,src/main/res"
        // first defines where the java files are, the second where the xml files are
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.libraries", libraries
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.java.libraries", libraries

        property "sonar.tests", "src/test/java" // where the tests are located
        property "sonar.java.test.binaries", "build/intermediates/classes/debug"
        property "sonar.java.test.libraries", libraries

        //property "sonar.scm.provider", "git"

        property "sonar.jacoco.reportPath", "build/jacoco/testDebugUnitTest.exec"
        // path to coverage reports
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/debug"
        // path to junit reports
        property "sonar.android.lint.report", "build/outputs/lint-results-release-fatal.xml"
        // path to lint reports
    }
}

import org.gradle.internal.os.OperatingSystem;

task sonarComplete(type: Exec) {
    workingDir "./"
    def command = "../gradlew"
    if (OperatingSystem.current().isWindows()) {
        command = command + ".bat"
    }
    commandLine command, "clean", "assemble", "lint${Flavor}Debug", "test", "jacocoTest${Flavor}DebugUnitTestReport", "sonarqube"
}